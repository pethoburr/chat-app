#!/usr/bin/env node

/**
 * Module dependencies.
 */
import app from '../app.js';
import debug from 'debug';
import http from 'http';
import { add_user_convo, getRoom, pool, save_room, add_group, checkId, save_msg, get_convos, match_room } from '../database.js';
import { Server } from 'socket.io';
// var debug = require('debug')('chat-app:server');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: ['http://localhost:5173'],
    method: ['GET', 'POST']
  }
})

pool.getConnection((err, connection) => {
  if (err) {
    console.error('Error connecting to database:', err);
    return;
  }
  console.log('Connected to database');
  connection.release(); // Release the connection when done
});

io.on('connection', (socket) => {
  console.log(`socket id: ${socket.id}`);
  socket.on('send-message', async (message, roomName, peeps) => {
    if (!message || !message.content) {
      console.error('invalid message content')
      return;
    }
    message.content = message.content.trim()
    let convos;
    if (!peeps.length) {
      convos = await get_convos(message.room_id)
      console.log(`convos: ${JSON.stringify(convos)}`)
      convos.map((convo) => {
        peeps.push(convo.user_id)
      })
    }
    const boolie = await match_room(message.room_id)
    if (boolie) {
        const savedMsg = await save_msg(message, peeps)
        console.log(`saved msg: ${savedMsg}`)
        socket.to(roomName).emit('receive-message', message)
    } else {
      await roomCreator(roomName, message.user_id, peeps)
      const savedMsg = await save_msg(message, peeps)
      console.log(`saved msg: ${savedMsg}`)
      socket.join(roomName)
      socket.to(roomName).emit('receive-message', message)
  }
})

  const roomCreator = async(name, id, peeps) => {
    if (id === null && peeps === null) {
      socket.join(name)
      await save_room(name)
      shiey = await getRoom(name)
      console.log(`shiey: ${JSON.stringify(shiey[0][0])}`)
      return shiey[0][0]
    } else {
      socket.join(name);
      let shiey = '';
      await save_room(name)
      shiey = await getRoom(name)
      const roomId = shiey[0][0].id;
      console.log(`shiey: ${JSON.stringify(shiey[0][0])}`)
      await add_user_convo(id, roomId)
      await add_group(peeps, roomId)
      io.to(name).emit('new-room', name);
      return shiey[0][0]
    }
  }

  socket.on('create-room', async (roomName, userId, ppl) => {
    if (!roomName) {
      console.error('room name is required')
      return;
    }
    roomName = roomName.trim()
    const newRoom = await roomCreator(roomName, userId, ppl)
    socket.emit('created-room', newRoom)
  })

  socket.on('join-room', (roomName) => {
    if (!roomName) {
      console.error('room name is required')
      return;
    }
    roomName = roomName.trim()
    socket.join(roomName);
  })

  socket.on('leave-room', (roomName) => {
    if (!roomName) {
      console.error('room name is required')
      return;
    }
    roomName = roomName.trim()
    socket.leave(roomName);
    console.log(`User ${socket.id} left room ${roomName}`)
  })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
