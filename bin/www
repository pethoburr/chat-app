#!/usr/bin/env node

/**
 * Module dependencies.
 */
import app from '../app.js';
import debug from 'debug';
import http from 'http';
import { pool } from '../database.js';
import { Server } from 'socket.io';
// var debug = require('debug')('chat-app:server');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: ['https://localhost:5173']
  }
})

pool.getConnection((err, connection) => {
  if (err) {
    console.error('Error connecting to database:', err);
    return;
  }
  console.log('Connected to database');
  connection.release(); // Release the connection when done
});

io.on('connection', (socket) => {
  console.log(`socket id: ${socket.id}`);
  socket.on('send-message', (message, room) => {
    console.log(message)
    pool.query('INSERT INTO messages (content, room) VALUES (?, ?)', [message, room], (error, results, fields) => {
      if (error) {
        console.error('Error saving message to database:', error);
        return;
      }
      console.log('Message saved to database');
    });
    if (room === '') {
      socket.broadcast.emit('receive-message', message)
    } else {
      socket.to(room).emit('receive-message', message)
    }
  })

  socket.on('create-room', (roomName) => {
    socket.join(roomName);
    io.to(roomName).emit('new-room', roomName);
    console.log(`new room created: ${roomName}`)
  })

  socket.on('join-room', (room) => {
    socket.join(room);
  })

  socket.on('leave-room', (room) => {
    socket.leave(room);
    console.log(`User ${socket.id} left room ${room}`)
  })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
